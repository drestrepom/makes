{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udd84 Makes","text":"<p>A software supply chain framework powered by Nix.</p>"},{"location":"architecture/","title":"Architecture","text":"<pre><code>flowchart TB\n\n  ci_cd_code[CI/CD as code]\n  git_repo[Git Repository]\n  inputs[Other inputs]\n  project[Project]\n\n  subgraph human[Interested Parties]\n    consumer[Consumer]\n    developer[Developer]\n  end\n\n  subgraph build[Hermetic and Reproducible Builds]\n    nix[Nix Package Manager]\n    nix_derivation[Nix Derivation SBOM]\n    nix_store_path[Nix Store Path - Built artifact]\n    nixpkgs_collection[Nixpkgs Collection]\n    nixpkgs_module_system[Module System]\n  end\n\n  subgraph makes[Makes]\n    makes_cli[Makes CLI]\n    makes_framework[Makes Framework]\n  end\n\n  subgraph slsa[Supply Chain Security]\n    slsa_provenance[SLSA Provenance Attestation]\n  end\n\n  consumer -- uses --&gt; makes_cli\n  ci_cd_code -- uses --&gt; makes_framework\n  ci_cd_code -- uses --&gt; nixpkgs_collection\n  ci_cd_code -- uses --&gt; inputs\n  developer -- uses --&gt; makes_cli\n  developer -- maintains --&gt; project\n  git_repo -- is fetched by --&gt; makes_cli\n  git_repo -- contains --&gt; ci_cd_code\n  makes_cli -- produces --&gt; slsa_provenance\n  makes_cli -- uses --&gt; nix\n  makes_framework -- uses --&gt; nixpkgs_module_system\n  inputs -- is fetched by --&gt; nix\n  nixpkgs_collection -- is fetched by --&gt; nix\n  nixpkgs_module_system -- is fetched by --&gt; nix\n  nix -- produces --&gt; nix_derivation\n  nix -- produces --&gt; nix_store_path\n  project -- has --&gt; git_repo</code></pre>"},{"location":"contributing/","title":"Contributing to Makes","text":"<ul> <li>Bug reports: here</li> <li>Feature requests: here</li> <li>Give us a star: here</li> <li>Feedback: here</li> </ul>"},{"location":"contributing/#code-contributions","title":"Code contributions","text":"<p>We accept anything that benefits the community, thanks for sharing your work with the world. We can discuss implementation details here.</p> <ol> <li>Write your idea: here</li> <li>Fork Makes on GitHub</li> <li>Git-clone your fork</li> <li>Hack as much as you like!</li> <li>Git-commit your changes.</li> <li>Git-push changes to your fork</li> <li>Create a Pull Request from your fork to Makes</li> </ol> <p>Guidelines:</p> <ul> <li>Keep it simple</li> <li>Remember we write code for humans, not machines</li> <li>Write an argument: <code>/src/args</code></li> <li>Write a module (if applies): <code>/src/evaluator/modules</code></li> <li>Write docs: <code>/README.md</code> or <code>/docs</code></li> <li>Write a test: <code>/makes.nix</code> or <code>/makes/**/main.nix</code></li> <li>Write a test GitHub workflow: <code>/.github/workflows/dev.yml</code></li> </ul> <p>Examples:</p> <ul> <li>feat(build): #262 lint git mailmap</li> <li>feat(build): #232 lint terraform</li> <li>feat(build): #232 test terraform</li> <li>feat(build): #232 deploy terraform</li> <li>feat(build): #252 aws secrets from env</li> <li>feat(build): #232 make parallel utils</li> </ul>"},{"location":"contributing/#the-legal-side-of-contributions","title":"The legal side of contributions","text":"<p>All of the code that you submit to our code repository will be licensed under the MIT license.</p> <p>Please add a <code>Signed-off-by: Full Name &lt;email&gt;</code> to your commits as explained here to signal that you agree to the terms of the following Developer Certificate of Origin.</p> <p>Thank you!</p>"},{"location":"contributing/#review-process","title":"Review process","text":"<p>Once a pull request is opened in the repository, a maintainer must follow the following steps to review it:</p> <ol> <li>Check that the proposed change has an associated issue,    enough discussion has happened on it,    and there is consensus in the implementation details,    and if we agree that implement it is a good idea.</li> <li>Check if the change modifies the Architecture    in any way, and that it has been updated.</li> <li>Check if the implementation follows the    Secure Design Principles,    and documents there    any new interactions,    or updates the documentation accordingly.</li> <li>Check if the implementation introduces new threats,    or changes/removes an existing threat,    and if the Threat Model    documentation has been updated to reflect it.</li> <li>Check if the change adds or modifies    an existing security property of the system,    and if the Software Assurance    documentation has been updated to reflect it.</li> <li>Check if the CI/CD succeeded.    No job should fail    unless something unrelated to the pull request happened.</li> <li>The Developer Certificate of Origin was accepted,    normally through checking    that the job in the CI/CD that verifies it succeeded.</li> <li>The steps mentioned in the sections above were followed,    particularly check if the code is readable,    maintainable,    proper tests were added or updated,    the corresponding docs were added or updated,    and the architecture and design seems to be of good quality.</li> </ol>"},{"location":"governance/","title":"Governance","text":"<p>Decisions, approvals, code reviews, etc, are made by the project maintainers:</p> <ul> <li>Kevin Amado - @kamadorueda</li> <li>Daniel Salazar - @dsalaza4</li> <li>Jhon Perez - @jpverde</li> </ul> <p>Discussions usually happen within the issues section.</p>"},{"location":"security/","title":"Security","text":"<p>This section evaluates Makes using various standards and tries to address the security of Makes as an ecosystem using the three following categories:</p> <ul> <li>Security of using the Makes CLI.</li> <li>Security of the software built using Makes.</li> <li>Security of Makes as a software project.</li> </ul>"},{"location":"security/assurance/","title":"Software Assurance","text":"<p>This is what user can expect from Makes in terms of security, the notation is that of a Structured Assurance Case Model[^1].</p> <ul> <li> <p>The Makes CLI application is free of known security vulnerabilities.</p> </li> <li> <p>The Python code of the Makes CLI application     is free of known security vulnerabilities.</p> <ul> <li>SonarCloud   reviews every pull request.</li> </ul> <p>Proof:</p> <ul> <li> <p>You can check the     SonarCloud pull requests list for Makes</p> </li> <li> <p>You can check the     pull requests history     and see if the latest pull requests     have a comment     from SonarCloud.     For example:     PR 925, Comment 1256837172</p> </li> <li> <p>Vulnerabilities count on SonarCloud is zero.</p> </li> </ul> <p>Proof:</p> <ul> <li>Visit the SonarCloud dashboard.     The vulnerabilities count should be zero.</li> </ul> </li> <li> <p>The dependencies of the Makes CLI application     are free of known security vulnerabilities.</p> <ul> <li>Dependabot alerts   are enabled for the repository.</li> </ul> <p>Proof:</p> <ul> <li>As a project maintainer,     you can see if Dependabot is enabled     here.</li> <li>As an external user,     there is no way to verify     if Dependabot is enabled     because the configuration page for this     is only available to repository maintainers.     However,     it is possible to see the pull requests created by the bot,     for example:     PR 927.     Additionally,     an external user could check     if there has been Dependabot pull requests recently     by checking the     pull requests history.     It is important to note     that if no recent pull requests exist     it may mean     that no known security vulnerabilities have been found,     and not necessarily that this claim is false.</li> </ul> </li> </ul>"},{"location":"security/assurance/#references","title":"References","text":"<p>[^1]:</p> <p>Rhodes, T. , Boland Jr., F. , Fong, E. and Kass, M. (2009), Software Assurance Using Structured Assurance Case Models, NIST Interagency/Internal Report (NISTIR), National Institute of Standards and Technology, Gaithersburg, MD, [online], https://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=902688 (Accessed September 23, 2022)</p>"},{"location":"security/design-principles/","title":"Design Principles","text":""},{"location":"security/design-principles/#principle-of-least-privilege","title":"Principle of Least Privilege","text":"<ul> <li> <p>The Makes CLI is a python application that runs in user-space.   The privileges required are:</p> </li> <li> <p>Write access to the <code>${HOME}</code>,     which is normally owned by the user,     so no extra privileges     other than what the user already has are required.</p> </li> <li>Creating temporary files/directories,     which respects the <code>${TMPDIR}</code> environment variable,     which is a functionality normally available to a user,     so no extra privileges are required.</li> <li>A system with Nix installed.</li> <li> <p>(optional) privileges to create Kernel namespaces.</p> </li> <li> <p>The Makes framework is simply a library   that aids the developer in creating build scripts,   so no privileges are required,   the Makes framework is just source code   that the user can opt-in to use.</p> </li> <li> <p>When containers are built,   they are build by assembling an OCI-compliant image   (TAR files per each layer plus a JSON manifest),   without resorting to privileged daemons like that of Docker.   They are generated as any other build (hermetic, pure, etc)   using information from the Nix Store.</p> </li> </ul>"},{"location":"security/design-principles/#principle-of-fail-safe-defaults","title":"Principle of Fail-Safe Defaults","text":"<ul> <li>By default, builds are run in a sandbox   that uses kernel namespaces   to prevent the build from accessing the network   and the external file system.</li> </ul> <p>The user is given the option to opt-out from this behavior,   but this is enabled by default.</p> <ul> <li>Generated files are created inside user-owned folders by default,   which inherit the security   that the user has previously defined for the directory.</li> </ul> <p>An user may opt-out from this behavior by setting environment variables,   but user-owned folders are selected by default.</p> <ul> <li>In the most common configuration,   the contents of the <code>/nix/store</code>   are never published to the internet.</li> </ul> <p>A user may want to share artifacts with other users   in order to improve performance   by writing artifacts to a binary cache,   so that other users can download the artifacts   if they have already been built by other user,   but this behavior   requires configuring a read+write binary cache   and setting the corresponding access secret.</p> <p>A read-only binary cache (https://cache.nixos.org)   and no write binary cache   is the default configuration,</p>"},{"location":"security/design-principles/#principle-of-economy-of-mechanism","title":"Principle of Economy of Mechanism","text":"<ul> <li>The Makes CLI is essentially a wrapper over Nix,   so the surface is as small as possible (~1000 loc).</li> <li>The Makes Framework defines a common set of utilities   a user can opt-in to use,   saving the user the work of writing that functionality themselves   which would require the same amount of code anyway.</li> </ul>"},{"location":"security/design-principles/#principle-of-complete-mediation","title":"Principle of Complete Mediation","text":""},{"location":"security/design-principles/#principle-of-open-design","title":"Principle of Open Design","text":"<ul> <li>Makes is Free and Open Source Software,   anyone can read its internals:   https://github.com/fluidattacks/makes</li> </ul>"},{"location":"security/design-principles/#principle-of-separation-of-privilege","title":"Principle of Separation of Privilege","text":""},{"location":"security/design-principles/#principle-of-least-common-mechanism","title":"Principle of Least Common Mechanism","text":"<ul> <li>In the most common case   each user of Makes has a personal <code>/nix/store</code>   and a personal installation of Nix.   The <code>/nix/store</code> contents are not shared between users by default,   unless the user configures a read+write binary cache   and sets the corresponding binary cache secret.</li> </ul>"},{"location":"security/design-principles/#principle-of-psychological-acceptability","title":"Principle of Psychological Acceptability","text":"<ul> <li>The Makes CLI is easy to use.   Performing an installation using the default values   yields a sufficiently secure version of the system.   Users familiar with other build tools would feel at home.</li> </ul>"},{"location":"security/slsa/","title":"Supply Chain Levels for Software Artifacts","text":"<p>The SLSA framework helps organizations measure the level of assurance that the Software Artifacts they produce actually contain and use what they intended (integrity), by ensuring that the whole build and release process, and all of the involved sources and dependencies cannot be tampered with.</p> <p>In this document, we use the version 0.1 of the specification.</p> <p>Our current SLSA level is 2. The following is a detail of the levels achieved on each of the requirements:</p> Requirement Level Source - Version Controlled 4 Source - Verified History 4 Source - Retained Indefinitely 4 Source - Two Person Reviewed 3 Build - Scripted Build 4 Build - Build Service 4 Build - Build As Code 4 Build - Ephemeral Environment 4 Build - Isolated 2 Build - Parameter-less 4 Build - Hermetic 4 Build - Reproducible 4 Provenance - Available 4 Provenance - Authenticated 4 Provenance - Service Generated 4 Provenance - Non-Falsifiable 4 Provenance - Dependencies Complete 4 Common - Security 4 Common - Access 4 Common - Superusers 3 <p>For clarity, this is how SLSA definitions map into our infrastructure:</p> <ul> <li>Source: Git repository at:   github.com/fluidattacks/makes.</li> <li>Platform: GitHub Actions,   Makes,   and the Nix package manager.</li> <li>Build service:   GitHub Actions,   using GitHub hosted runners.</li> <li>Build: A Nix derivation.</li> <li>Environment: A sandbox   that Chroots   into an empty temporary directory,   provides private versions   of <code>/proc</code>, <code>/dev</code>, <code>/dev/shm</code>, and <code>/dev/pts</code>,   and uses a private PID, mount, network, IPC, and UTS namespace   to isolate itself from other processes in the system.</li> <li>Steps: Instructions declared   in the corresponding Makes configuration files   written using the Nix programming language   and shell scripting, versioned as-code in the source.</li> </ul>"},{"location":"security/slsa/#source-requirements","title":"Source Requirements","text":""},{"location":"security/slsa/#version-controlled","title":"Version controlled","text":"<p>Every change to the source is tracked on GitHub, using the Git version control system.</p> <ul> <li>Change history: There exists a record   of the history of changes   that went into the revision.   Each change contains:   the identities of the uploader and reviewers (if any),   timestamps of the reviews (if any) and submission,   the change description/justification,   the content of the change,   and the parent revisions.</li> </ul> <p>For example: PR 649.</p> <ul> <li>Immutable reference:   There exists a way to indefinitely reference a particular,   immutable revision.   For example:   c61feb1be11abc4d7ffed52c660a45c57f06599c.</li> </ul>"},{"location":"security/slsa/#verified-history","title":"Verified history","text":"<p>Every change in the revision\u2019s history need to pass through a Pull Request.</p> <p>In order to approve a Pull Request the reviewer need to be strongly authenticated into GitHub. The authentication process requires 2FA, and the dates of the change are recorded in the Pull Request.</p> <p>Only users who were previously granted access by a platform Admin can review Pull Requests. External contributors can create a Pull Request without any special privileges, but it won't be merged until reviewers submit their approval.</p> <p>For example: PR 649.</p>"},{"location":"security/slsa/#retained-indefinitely","title":"Retained indefinitely","text":"<p>The revision and its change history are preserved indefinitely and cannot be deleted or modified (not even with multi-party approval). Additionally, the main branch is protected against accidental history overwrite using GitHub's branch protection rules.</p> <p>At the moment, no legal requirement impedes us to preserve indefinitely our change history, and no obliteration policy is in effect. In fact, our source code is Free and Open Source Software: Anyone can download or fork the repository.</p>"},{"location":"security/slsa/#two-person-reviewed","title":"Two Person Reviewed","text":"<p>Every change in the revision\u2019s history is agreed to by at least one trusted person prior to submission and each of these trusted persons are authenticated into the platform (using 2FA) first. Only project maintainers can merge Pull Requests and therefore append a change into the revision's history.</p>"},{"location":"security/slsa/#build-requirements","title":"Build Requirements","text":""},{"location":"security/slsa/#scripted-build","title":"Scripted Build","text":"<p>All build steps were fully defined using GitHub Actions, Makes and Nix.</p> <p>Manual commands are not necessary to invoke the build script. A new build is triggered automatically each time new changes are pushed to the repository.</p> <p>For example:</p> <ul> <li>.github/workflows/prod.yml</li> <li>makes/cli/pypi/main.nix</li> </ul>"},{"location":"security/slsa/#build-service","title":"Build Service","text":"<p>All build steps run on GitHub Actions using GitHub hosted runners.</p> <p>For example:</p> <ul> <li>Actions tab</li> </ul>"},{"location":"security/slsa/#build-as-code","title":"Build As Code","text":"<p>All build steps have been stored and versioned in the Git Repository.</p> <p>For example:</p> <ul> <li>.github/workflows</li> </ul>"},{"location":"security/slsa/#ephemeral-environment","title":"Ephemeral Environment","text":"<p>According to the GitHub Actions documentation,</p> <ul> <li>\"Each GitHub-hosted runner   is a new virtual machine (VM)   hosted by GitHub with the runner application   and other tools preinstalled.\"</li> <li>\"When the job begins,   GitHub automatically provisions a new VM for that job.   All steps in the job execute on the VM,   allowing the steps in that job to share information   using the runner's filesystem.   You can run workflows directly on the VM   or in a Docker container.   When the job has finished,   the VM is automatically decommissioned.\"</li> </ul> <p>Additionally, the Nix package manager provides an ephemeral environment to each of the derivations. On Linux, the environment is a sandbox that Chroots into an empty temporary directory, provides private versions of <code>/proc</code>, <code>/dev</code>, <code>/dev/shm</code>, and <code>/dev/pts</code>, and uses a private PID, mount, network, IPC, and UTS namespace to isolate itself from other processes in the system.</p>"},{"location":"security/slsa/#isolated","title":"Isolated","text":"<p>Our build service ensures that the build steps run in an isolated environment free of influence from other build instances, whether prior or concurrent, by using containerization technologies.</p> <p>Builds are executed using the Nix package manager, which prevents builds from accessing any external environment variables, network resources, sockets, or paths in the file system. and provides private versions of <code>/proc</code>, <code>/dev</code>, <code>/dev/shm</code>, and <code>/dev/pts</code>, and uses a private PID, mount, network, IPC, and UTS namespace to isolate the build from other builds happening concurrently in the system.</p> <p>Input-addressed build caches are used to speed-up the pipeline.</p>"},{"location":"security/slsa/#parameter-less","title":"Parameter-less","text":"<p>The build output cannot be affected by user parameters other than the build entry point and the top-level source location.</p> <p>In order to modify the build output, a change to the source code must happen first.</p>"},{"location":"security/slsa/#hermetic","title":"Hermetic","text":"<p>Builds are executed using the Nix package manager, which prevents builds from accessing any external environment variables, network resources, sockets, or paths in the file system.</p> <p>All transitive build steps, sources, and dependencies are fully declared up front with immutable references.</p> <p>For example:</p> <ul> <li>makes/cli/pypi/pypi-sources.yaml.</li> </ul> <p>The Nix package manager:</p> <ul> <li>Fetches all of the declared artifacts   into a trusted control plane (the /nix/store).</li> <li>Mounts into the build sandbox   the specific /nix/store paths required by it.</li> <li>Allows a build to fetch artifacts over the network   if and only if the expected artifact integrity is specified.</li> <li>Validates the integrity of each artifact   before allowing a build to use it,   and fails the build if the verification fails.</li> <li>Denies network connectivity if no expected hash is specified.</li> </ul>"},{"location":"security/slsa/#reproducible","title":"Reproducible","text":"<p>All of our build scripts are intended to be reproducible.</p> <p>The reproducibility guarantees of our build scripts are that of the Nix package manager.</p>"},{"location":"security/slsa/#provenance-requirements","title":"Provenance Requirements","text":""},{"location":"security/slsa/#available","title":"Available","text":"<p>Provenance is produced by Makes, and exposed by the build service as a JSON document together with the artifacts produced by the build.</p> <p>Only builds that produce artifacts generate provenance, because if a build does not produce artifacts, then there wouldn't be something to verify the provenance of.</p>"},{"location":"security/slsa/#authenticated","title":"Authenticated","text":"<p>The authenticity of the provenance comes from the fact that it can be downloaded from the build service itself, and therefore the authenticity claim is as strong as the Build and Source Requirements are secure.</p> <p>The integrity of the provenance is displayed in the logs and generated by Makes.</p>"},{"location":"security/slsa/#service-generated","title":"Service Generated","text":"<p>The data in the provenance is exposed by the build service, and is generated by Makes.</p> <p>Regular users of the service are not able to inject or alter the contents because a build is fully determined and automated by its configuration, and the configuration comes directly from the source.</p>"},{"location":"security/slsa/#non-falsifiable","title":"Non-Falsifiable","text":"<p>The provenance cannot be falsified by the build service's users:</p> <ul> <li>There is no secret material   to demonstrate the non-falsifiable nature of the provenance   (see Provenance - Authenticated).</li> <li>Even if such secret material existed,   builds are run in an hermetic environment,   and therefore they wouldn't be available to the build steps   (see Build - Hermetic).</li> <li>Every field in the provenance is generated   by the build service in a trusted control plane,   which is fully defined by the build configuration,   which comes directly from the Source,   and therefore is as secure as the Source is   (see Source - Verified History).</li> </ul>"},{"location":"security/slsa/#dependencies-complete","title":"Dependencies Complete","text":"<p>The provenance contains all of dependencies that were available while running the build steps.</p> <p>This is guaranteed by the fact that builds are hermetic (see Build - Hermetic). So for a build to succeed, all of its dependencies must be declared, and therefore the build tool (Makes and Nix) who fetched them at build time, have strong knowledge of their existence.</p>"},{"location":"security/slsa/#common-requirements","title":"Common Requirements","text":""},{"location":"security/slsa/#security","title":"Security","text":"<p>Please read the Security page.</p>"},{"location":"security/slsa/#access","title":"Access","text":"<p>Our build service (GitHub Actions) is SaaS, and we use GitHub hosted runners. Only some GitHub employees may have access to the runners. We cannot access the build service infrastructure physically nor remotely.</p>"},{"location":"security/slsa/#superusers","title":"Superusers","text":"<p>Only a small number of platform admins may override the guarantees provided by SLSA. Particularly through disabling security options in the repository configuration page. Doing so does not currently require approval of a second platform admin.</p>"},{"location":"security/threat-model/","title":"Threat Model","text":""},{"location":"security/threat-model/#spoofing","title":"Spoofing","text":"<ul> <li>A user can mistype the Makes installation command   and wrongly install a different (potentially malicious) tool.</li> </ul> <p>Mitigation:</p> <ul> <li> <p>The installation command is given in plain-text,     users can copy-paste it to avoid typos.</p> </li> <li> <p>A user can mistype the target project to be built with Makes,   and end-up building (and potentially running)   a different (potentially malicious) project.</p> </li> </ul> <p>Mitigation:</p> <ul> <li>The most common use case     (running makes on the project in the current working directory)     has a very convenient syntax: <code>$ m .</code>,     which is very unlikely to be mistyped.</li> <li> <p>When referencing a project over the internet,     the user is forced to use a git provider (github/gitlab),     the owner account (which should be trusted by the user),     the target repository,     and a branch, commit or tag.</p> <p>By using a commit, the user can force the integrity of the downloaded data to match what they expect.</p> </li> </ul>"},{"location":"security/threat-model/#tampering","title":"Tampering","text":"<ul> <li>The Nix Store can be tampered with   if no good installation measures are taken by the user.</li> </ul> <p>Mitigation:</p> <ul> <li>The Nix installation is responsibility of the user,     but in general,     a user could bind mount <code>/nix</code> as a read-only file system,     and make the <code>/nix/store</code> only accessible by root     and the <code>nixbld</code> group users,     reducing an attack vector to the physical or local layer,     which can be further protected     by the use of frameworks like SLSA,     and full disk encryption using LUKS.</li> </ul>"},{"location":"security/threat-model/#repudiation","title":"Repudiation","text":"<ul> <li>In single tenant setups,   for instance when developers run Makes in their laptops,   there is nothing to repudiate,   there is only one user performing builds (the developer).   However,   in multi-tenant setups,   for instance when Makes is run in a shared CI/CD system,   a user could deny running a build.</li> </ul> <p>Mitigation:</p> <ul> <li>Makes produces     SLSA Provenance Attestations,     which identify the builder and the built artifact.</li> <li>Most CI/CD systems     (and particularly the ones supported by Makes)     offer logs collection,     so it would be easy to associate a build     with the identity that triggered it.     It is responsibility of the users     to configure such CI/CD systems     in a secure way and to protect (and backup) the logs.</li> </ul>"},{"location":"security/threat-model/#information-disclosure","title":"Information Disclosure","text":"<ul> <li>Although the <code>/nix/store</code> is individual per user,   a user may write secrets to it,   and then those secrets can be published to a binary cache   that is publicly accessible.</li> </ul> <p>Examples of this include Nix idioms like:</p> <pre><code>[\n  // Nix would load the secrets in plain-text to the `/nix/store`\n  ./file-with-secrets-in-plain-text.txt\n\n  // Nix would load the git repository to the `/nix/store`\n  // This also applies to other builtins.fetch* that could\n  // fetch private information\n  (builtins.fetchGit {\n    // Private repository (with potential intellectual property)\n    url = \"git@github.com:company/secrets.git\";\n  })\n]\n</code></pre> <p>Mitigation:</p> <ul> <li>Nothing from the <code>/nix/store</code>     is pushed to a binary cache by default.     A user would need to configure the cache explicitly,     and expose the corresponding secret     in an environment variable.</li> <li>Makes has support for binary caches     that require a secret for reading and writting,     so a user may chose to use this instead     as an extra layer of prevention     if loading secrets to the <code>/nix/store</code> is mandatory.     Please see https://cachix.org/ for more information.</li> <li> <p>Makes has utilities for working with secrets in a way     that they are only copied to the <code>/nix/store</code>     in encrypted form,     and then decrypted at runtime,     where there are safe from disclosure.</p> <p>For example: <code>secretsForAwsFromEnv</code>, <code>secretsForAwsFromGitlab</code>, <code>secretsForEnvFromSops</code>, <code>secretsForGpgFromEnv</code>, <code>secretsForKubernetesConfigFromAws</code>, and <code>secretsForTerraformFromEnv</code>.</p> <p>However, we don't currently have a way to protect the user from using <code>builtins.fetch*</code>. If your workflow needs this, please avoid pushing artifacts to a public binary cache, or use a private binary cache instead.</p> </li> <li> <p>Makes copies the contents of the git repository     into a trusted control plane,     and excludes all of the files     that are not tracked by Git     from this checkout.     This means that if the file with secrets is inside the repository,     but included in the <code>.gitignore</code>     such that a <code>git fetch</code> of the given remote and revision     would ignore it,     Makes would not copy it into the trusted control plane,     and therefore Nix wouldn't load it into the <code>/nix/store</code>.</p> </li> </ul>"},{"location":"security/threat-model/#denial-of-service","title":"Denial of Service","text":""},{"location":"security/threat-model/#elevation-of-privileges","title":"Elevation of Privileges","text":""}]}